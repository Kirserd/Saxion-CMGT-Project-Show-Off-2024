//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/CameraProfile.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraProfile: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraProfile()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraProfile"",
    ""maps"": [
        {
            ""name"": ""CameraRotationMap"",
            ""id"": ""c15eaf89-d610-40d2-83d3-98cb59e6a300"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""365f94d8-529d-482f-9865-99bf7718d47c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""24da28ef-0eee-43aa-992c-5e498c0ba416"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0cb3dc4f-9c47-4545-84ae-79483da82d50"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0d3a4f7e-b8f7-408f-9a7b-59a7842d4f0d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29e133ca-3476-4f9d-add2-8437bb4b2815"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""873f0b3d-5042-4f05-839c-28eaa51e8837"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraRotationMap
        m_CameraRotationMap = asset.FindActionMap("CameraRotationMap", throwIfNotFound: true);
        m_CameraRotationMap_Rotate = m_CameraRotationMap.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraRotationMap
    private readonly InputActionMap m_CameraRotationMap;
    private List<ICameraRotationMapActions> m_CameraRotationMapActionsCallbackInterfaces = new List<ICameraRotationMapActions>();
    private readonly InputAction m_CameraRotationMap_Rotate;
    public struct CameraRotationMapActions
    {
        private @CameraProfile m_Wrapper;
        public CameraRotationMapActions(@CameraProfile wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_CameraRotationMap_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_CameraRotationMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraRotationMapActions set) { return set.Get(); }
        public void AddCallbacks(ICameraRotationMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraRotationMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraRotationMapActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(ICameraRotationMapActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(ICameraRotationMapActions instance)
        {
            if (m_Wrapper.m_CameraRotationMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraRotationMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraRotationMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraRotationMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraRotationMapActions @CameraRotationMap => new CameraRotationMapActions(this);
    public interface ICameraRotationMapActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
}
