//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/PlayerProfile.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerProfile: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerProfile()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerProfile"",
    ""maps"": [
        {
            ""name"": ""PlayerMovementMap"",
            ""id"": ""d0519041-a0f5-4433-9ec3-95df1acd1094"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6cdd0f23-1e7e-4f2f-afce-bc8de664e175"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""39b275bc-55b3-4263-a472-246e7a952361"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9fe82dfd-61ff-4162-81df-d712feb226b5"",
                    ""path"": ""Keyboard/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ee063168-5fe8-483a-8fe7-d4d9cbc0b2d0"",
                    ""path"": ""Keyboard/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c2f5f63a-ac39-439e-b8eb-9294b15a1580"",
                    ""path"": ""Keyboard/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3676c95d-14d0-4189-8eb9-55f11d0cc4b3"",
                    ""path"": ""Keyboard/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerInteractionMap"",
            ""id"": ""e171ae20-11a2-403d-940e-009d1b791685"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c0b4bdd8-222c-4e22-baea-44b8770ae291"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a6616d3-a724-4c9c-aaad-b81a63bdc8de"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovementMap
        m_PlayerMovementMap = asset.FindActionMap("PlayerMovementMap", throwIfNotFound: true);
        m_PlayerMovementMap_Move = m_PlayerMovementMap.FindAction("Move", throwIfNotFound: true);
        // PlayerInteractionMap
        m_PlayerInteractionMap = asset.FindActionMap("PlayerInteractionMap", throwIfNotFound: true);
        m_PlayerInteractionMap_Interact = m_PlayerInteractionMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovementMap
    private readonly InputActionMap m_PlayerMovementMap;
    private List<IPlayerMovementMapActions> m_PlayerMovementMapActionsCallbackInterfaces = new List<IPlayerMovementMapActions>();
    private readonly InputAction m_PlayerMovementMap_Move;
    public struct PlayerMovementMapActions
    {
        private @PlayerProfile m_Wrapper;
        public PlayerMovementMapActions(@PlayerProfile wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovementMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerMovementMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerMovementMapActions instance)
        {
            if (m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementMapActions @PlayerMovementMap => new PlayerMovementMapActions(this);

    // PlayerInteractionMap
    private readonly InputActionMap m_PlayerInteractionMap;
    private List<IPlayerInteractionMapActions> m_PlayerInteractionMapActionsCallbackInterfaces = new List<IPlayerInteractionMapActions>();
    private readonly InputAction m_PlayerInteractionMap_Interact;
    public struct PlayerInteractionMapActions
    {
        private @PlayerProfile m_Wrapper;
        public PlayerInteractionMapActions(@PlayerProfile wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_PlayerInteractionMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteractionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractionMapActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IPlayerInteractionMapActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IPlayerInteractionMapActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractionMapActions @PlayerInteractionMap => new PlayerInteractionMapActions(this);
    public interface IPlayerMovementMapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlayerInteractionMapActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
